/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trashCode;

import customException.FailToLoadInitInboxException;
import giaoDienApp.mailListRender;
import giaoDienApp.newLogin;
import gmailApi.GlobalVariable;
import gmailApi.Init;
import gmailApi.LabelProcess;
import gmailApi.LoginProcess;
import static gmailApi.LoginProcess.checkMail;
import gmailApi.MessageObject;
import gmailApi.MessageProcess;
import gmailApi.SendMailProcess;
import gmailApi.XuLyFile;
import java.awt.Cursor;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author Admin
 */
public class newMainPageSmall extends javax.swing.JFrame {

    /**
     * Creates new form newMainPage
     */
    List<MessageObject> messageInbox;
    GridBagLayout layout = new GridBagLayout();
//    ReadMailOption_Pn readMail_pn = new ReadMailOption_Pn(messageInbox);
//    WriteMailOption_Pn writeMail_pn = new WriteMailOption_Pn();
    private newLogin parentFrame;
    DefaultListModel inboxMailMode = null;
    DefaultListModel trashMailMode = null;

    public newMainPageSmall(newLogin parentFrame) {
	this.parentFrame = parentFrame;
	initComponents();
	// set size cho 2 Pn load động
	readMail_Pn.setSize(870, 60);
	writeMail_Pn.setSize(870, 60);
	// set gridBagLayout cho Pn cha
	this.dynamic_option_read_writeMenu_Pn.setLayout(layout);
	GridBagConstraints c = new GridBagConstraints();
	c.gridx = 0;
	c.gridy = 0;
	// load panelread con lên panel cha
	this.dynamic_option_read_writeMenu_Pn.add(readMail_Pn);
	c.gridx = 0;
	c.gridy = 0;
	// load panelread con lên panel cha
	this.dynamic_option_read_writeMenu_Pn.add(writeMail_Pn);
	// hiện panelread con, ẩn panelwrite con
	readMail_Pn.setVisible(true);
	writeMail_Pn.setVisible(false);
	// load mail khởi đầu chương trình
	loadStartUpMailBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        writeMail_Pn = new javax.swing.JPanel();
        fileAttachWrite_Lb = new javax.swing.JLabel();
        fileAttachWrite_Jcb = new javax.swing.JComboBox<>();
        addFileWrite_Bt = new javax.swing.JButton();
        cancel_Lb = new javax.swing.JLabel();
        send_Lb = new javax.swing.JLabel();
        readMail_Pn = new javax.swing.JPanel();
        fileAttachRead_Lb = new javax.swing.JLabel();
        fileAttachRead_Jcb = new javax.swing.JComboBox<>();
        downMail_Lb = new javax.swing.JLabel();
        moveToTrash_Lb = new javax.swing.JLabel();
        reply_Lb = new javax.swing.JLabel();
        waiting_Pn = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        menu_Pn = new javax.swing.JPanel();
        menu_Lb = new javax.swing.JLabel();
        newMail_Lb = new javax.swing.JLabel();
        boxMail_Lb = new javax.swing.JLabel();
        trashMail_Lb = new javax.swing.JLabel();
        logout_Lb = new javax.swing.JLabel();
        mail_Pn = new javax.swing.JPanel();
        from_Lb = new javax.swing.JLabel();
        from_Tf = new javax.swing.JTextField();
        to_Lb = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        to_Tf = new javax.swing.JTextField();
        date_Lb = new javax.swing.JLabel();
        date_Tf = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        cc_Lb = new javax.swing.JLabel();
        cc_Tf = new javax.swing.JTextField();
        bcc_Tf = new javax.swing.JTextField();
        bcc_Lb = new javax.swing.JLabel();
        subject_Tf = new javax.swing.JTextField();
        subject_Lb = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        mainText_Tarea = new javax.swing.JTextArea();
        topMenu_Pn = new javax.swing.JPanel();
        searchIcon_Lb = new javax.swing.JLabel();
        search_Tf = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        loginingUser_Lb = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        mailBox_Pn = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        boxMail_Jlist = new javax.swing.JList<>();
        loadingBoxName_Lb = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        countMailLoading_Lb = new javax.swing.JLabel();
        reload_Bt = new javax.swing.JButton();
        dynamic_option_read_writeMenu_Pn = new javax.swing.JPanel();

        writeMail_Pn.setBackground(new java.awt.Color(34, 92, 145));
        writeMail_Pn.setMinimumSize(new java.awt.Dimension(870, 60));
        writeMail_Pn.setName(""); // NOI18N
        writeMail_Pn.setPreferredSize(new java.awt.Dimension(870, 60));
        writeMail_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fileAttachWrite_Lb.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        fileAttachWrite_Lb.setForeground(new java.awt.Color(255, 255, 255));
        fileAttachWrite_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add_file_30px.png"))); // NOI18N
        fileAttachWrite_Lb.setText("File");
        writeMail_Pn.add(fileAttachWrite_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 90, 40));

        fileAttachWrite_Jcb.setToolTipText("Bạn có thể chọn file cần xoá và ấn Delete để xoá file !");
        fileAttachWrite_Jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAttachWrite_JcbActionPerformed(evt);
            }
        });
        fileAttachWrite_Jcb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileAttachWrite_JcbKeyPressed(evt);
            }
        });
        writeMail_Pn.add(fileAttachWrite_Jcb, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 280, 40));

        addFileWrite_Bt.setBackground(new java.awt.Color(34, 92, 145));
        addFileWrite_Bt.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        addFileWrite_Bt.setText("Open");
        addFileWrite_Bt.setBorder(null);
        addFileWrite_Bt.setBorderPainted(false);
        addFileWrite_Bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileWrite_BtActionPerformed(evt);
            }
        });
        writeMail_Pn.add(addFileWrite_Bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 11, 50, 40));

        cancel_Lb.setFont(new java.awt.Font("Consolas", 1, 26)); // NOI18N
        cancel_Lb.setForeground(new java.awt.Color(204, 204, 204));
        cancel_Lb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cancel_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancel_30px.png"))); // NOI18N
        cancel_Lb.setText(" Cancel");
        cancel_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancel_LbMouseClicked(evt);
            }
        });
        writeMail_Pn.add(cancel_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, 40));

        send_Lb.setFont(new java.awt.Font("Consolas", 1, 26)); // NOI18N
        send_Lb.setForeground(new java.awt.Color(204, 204, 204));
        send_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/sent_30px.png"))); // NOI18N
        send_Lb.setText(" Send");
        send_Lb.setToolTipText("");
        send_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                send_LbMouseClicked(evt);
            }
        });
        writeMail_Pn.add(send_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 10, -1, 40));

        readMail_Pn.setBackground(new java.awt.Color(34, 92, 145));
        readMail_Pn.setMinimumSize(new java.awt.Dimension(870, 60));
        readMail_Pn.setPreferredSize(new java.awt.Dimension(870, 60));
        readMail_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fileAttachRead_Lb.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        fileAttachRead_Lb.setForeground(new java.awt.Color(255, 255, 255));
        fileAttachRead_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/attach_30px.png"))); // NOI18N
        fileAttachRead_Lb.setText("File");
        readMail_Pn.add(fileAttachRead_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 70, 40));

        fileAttachRead_Jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAttachRead_JcbActionPerformed(evt);
            }
        });
        readMail_Pn.add(fileAttachRead_Jcb, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 300, 40));

        downMail_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        downMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/download_30px.png"))); // NOI18N
        downMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        downMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downMail_LbMouseClicked(evt);
            }
        });
        readMail_Pn.add(downMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 0, 50, 60));

        moveToTrash_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        moveToTrash_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove_30px.png"))); // NOI18N
        moveToTrash_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        moveToTrash_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moveToTrash_LbMouseClicked(evt);
            }
        });
        readMail_Pn.add(moveToTrash_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 0, 50, 60));

        reply_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reply_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reply_30px.png"))); // NOI18N
        reply_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reply_Lb.setMaximumSize(new java.awt.Dimension(40, 40));
        reply_Lb.setPreferredSize(new java.awt.Dimension(40, 40));
        readMail_Pn.add(reply_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 0, 50, 60));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/loading.gif"))); // NOI18N

        javax.swing.GroupLayout waiting_PnLayout = new javax.swing.GroupLayout(waiting_Pn);
        waiting_Pn.setLayout(waiting_PnLayout);
        waiting_PnLayout.setHorizontalGroup(
            waiting_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        waiting_PnLayout.setVerticalGroup(
            waiting_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(300, 100));

        menu_Pn.setBackground(new java.awt.Color(34, 92, 145));
        menu_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menu_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/menu_30px.png"))); // NOI18N
        menu_Pn.add(menu_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 13, -1, -1));

        newMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add_mail_50px.png"))); // NOI18N
        newMail_Lb.setToolTipText("Tạo và gửi mail mới");
        newMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newMail_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(newMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 110, -1, -1));

        boxMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mailer_50px.png"))); // NOI18N
        boxMail_Lb.setToolTipText("Xem hộp thư đến");
        boxMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        boxMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boxMail_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(boxMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 212, -1, 38));

        trashMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_trash_48.png"))); // NOI18N
        trashMail_Lb.setToolTipText("Xem hộp thư rác");
        trashMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trashMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trashMail_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(trashMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 301, -1, -1));

        logout_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logout_50px.png"))); // NOI18N
        logout_Lb.setToolTipText("Đăng xuất");
        logout_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logout_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(logout_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, -1, -1));

        mail_Pn.setBackground(new java.awt.Color(161, 233, 237));
        mail_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        from_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        from_Lb.setText("From");
        mail_Pn.add(from_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 40));

        from_Tf.setBackground(new java.awt.Color(161, 233, 237));
        from_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        from_Tf.setBorder(null);
        from_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                from_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(from_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 320, 30));

        to_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        to_Lb.setText("To");
        mail_Pn.add(to_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 320, 10));

        to_Tf.setBackground(new java.awt.Color(161, 233, 237));
        to_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        to_Tf.setBorder(null);
        to_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                to_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(to_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 730, 30));

        date_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        date_Lb.setText("Date");
        mail_Pn.add(date_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        date_Tf.setBackground(new java.awt.Color(161, 233, 237));
        date_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        date_Tf.setBorder(null);
        date_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(date_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 300, 30));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, 300, 10));

        cc_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        cc_Lb.setText("Cc");
        mail_Pn.add(cc_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        cc_Tf.setBackground(new java.awt.Color(161, 233, 237));
        cc_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        cc_Tf.setBorder(null);
        mail_Pn.add(cc_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 730, 30));

        bcc_Tf.setBackground(new java.awt.Color(161, 233, 237));
        bcc_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        bcc_Tf.setBorder(null);
        mail_Pn.add(bcc_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 730, 30));

        bcc_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        bcc_Lb.setText("Bcc");
        mail_Pn.add(bcc_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        subject_Tf.setBackground(new java.awt.Color(161, 233, 237));
        subject_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        subject_Tf.setBorder(null);
        subject_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subject_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(subject_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 730, 30));

        subject_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        subject_Lb.setText("Subject");
        mail_Pn.add(subject_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 730, 10));

        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 730, 20));

        jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 730, 10));

        jSeparator7.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 732, 10));

        mainText_Tarea.setColumns(20);
        mainText_Tarea.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        mainText_Tarea.setRows(5);
        mainText_Tarea.setToolTipText("");
        jScrollPane3.setViewportView(mainText_Tarea);

        mail_Pn.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 850, 270));

        topMenu_Pn.setBackground(new java.awt.Color(255, 255, 255));
        topMenu_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchIcon_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search_32px.png"))); // NOI18N
        topMenu_Pn.add(searchIcon_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        search_Tf.setBorder(null);
        search_Tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search_TfKeyPressed(evt);
            }
        });
        topMenu_Pn.add(search_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 210, 30));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        topMenu_Pn.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, 210, 10));

        loginingUser_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        loginingUser_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_user_24px.png"))); // NOI18N
        topMenu_Pn.add(loginingUser_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 20, 270, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete_30px.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        topMenu_Pn.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 10, 30, 40));

        mailBox_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        boxMail_Jlist.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        boxMail_Jlist.setToolTipText("");
        boxMail_Jlist.setSelectionBackground(new java.awt.Color(255, 255, 255));
        boxMail_Jlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boxMail_JlistMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(boxMail_Jlist);

        mailBox_Pn.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 56, 270, 520));

        loadingBoxName_Lb.setBackground(new java.awt.Color(255, 255, 255));
        loadingBoxName_Lb.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        loadingBoxName_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadingBoxName_Lb.setText("INBOX");
        loadingBoxName_Lb.setToolTipText("");
        loadingBoxName_Lb.setFocusTraversalPolicyProvider(true);
        loadingBoxName_Lb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mailBox_Pn.add(loadingBoxName_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 50));

        jSeparator8.setForeground(new java.awt.Color(0, 0, 0));
        mailBox_Pn.add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 270, 10));

        countMailLoading_Lb.setBackground(new java.awt.Color(255, 255, 255));
        countMailLoading_Lb.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N
        mailBox_Pn.add(countMailLoading_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 50, 50));

        reload_Bt.setBackground(new java.awt.Color(255, 255, 255));
        reload_Bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reset_30px.png"))); // NOI18N
        reload_Bt.setBorder(null);
        reload_Bt.setBorderPainted(false);
        reload_Bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reload_BtActionPerformed(evt);
            }
        });
        mailBox_Pn.add(reload_Bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 0, 40, 50));

        dynamic_option_read_writeMenu_Pn.setMinimumSize(new java.awt.Dimension(870, 60));
        dynamic_option_read_writeMenu_Pn.setName(""); // NOI18N

        javax.swing.GroupLayout dynamic_option_read_writeMenu_PnLayout = new javax.swing.GroupLayout(dynamic_option_read_writeMenu_Pn);
        dynamic_option_read_writeMenu_Pn.setLayout(dynamic_option_read_writeMenu_PnLayout);
        dynamic_option_read_writeMenu_PnLayout.setHorizontalGroup(
            dynamic_option_read_writeMenu_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 870, Short.MAX_VALUE)
        );
        dynamic_option_read_writeMenu_PnLayout.setVerticalGroup(
            dynamic_option_read_writeMenu_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menu_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topMenu_Pn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mailBox_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dynamic_option_read_writeMenu_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mail_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menu_Pn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(topMenu_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(mail_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dynamic_option_read_writeMenu_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(mailBox_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void from_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_from_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_from_TfActionPerformed

    private void to_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_to_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_to_TfActionPerformed

    private void date_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_date_TfActionPerformed

    private void subject_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subject_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_subject_TfActionPerformed

    private void newMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newMail_LbMouseClicked
	// TODO add your handling code here:
	// set lại text hiển thị ở box và xoá đi số lượng hiển thị
	loadingBoxName_Lb.setText("NEW MAIL");
	countMailLoading_Lb.setText("");
	// xoá đi các tf ở phần đọc mail
	cleanReadMailPanel();
	// tắt đi list load mail
	this.boxMail_Jlist.setVisible(false);
	// hiển thị panel option khi viết mail
	this.writeMail_Pn.setVisible(true);
	// ẩn panel option khi đọc mail
	this.readMail_Pn.setVisible(false);
	// from không chỉnh sửa nên ko cho phép chỉnh sửa
	this.from_Tf.setEditable(false);
	// tự động set là userId đã đăng nhập
	this.from_Tf.setText(GlobalVariable.userId);
	// date cũng tự sinh ra mới, không cho sửa
	this.date_Tf.setEditable(false);
	this.date_Tf.setText((new Date()).toString());

	this.to_Tf.setEditable(true);
	this.cc_Tf.setEditable(true);
	this.bcc_Tf.setEditable(true);
	this.subject_Tf.setEditable(true);
	this.mainText_Tarea.setEditable(true);
	// thêm tool tips hướng dẫn việc gửi đến nhiều mail cùng lúc
	this.bcc_Tf.setToolTipText("Các mail đặt cách nhau bỏi dấu ';'");
	this.cc_Tf.setToolTipText("Các mail đặt cách nhau bỏi dấu ';'");
	this.to_Tf.setToolTipText("Các mail đặt cách nhau bỏi dấu ';'");
    }//GEN-LAST:event_newMail_LbMouseClicked

    private void boxMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxMail_LbMouseClicked
	// TODO add your handling code here:
	cleanReadMailPanel();
	// vì ban đầu là load cái box này lên trước, nên khi bấm vào thì chỉ cần set lại model lên
	// mà không load lại từ đầu
	if (!loadingBoxName_Lb.getText().equals("INBOX")) {
	    loadingBoxName_Lb.setText("INBOX");
	    DefaultListModel model = (DefaultListModel) boxMail_Jlist.getModel();
	    boxMail_Jlist.setModel(inboxMailMode);                      // đổ dữ liệu từ listmodel đã tạo ở trên vào cái hiển thị
	    boxMail_Jlist.setCellRenderer(new mailListRender("INBOX"));   // set các cell trong list lại .
	    try {
		this.countMailLoading_Lb.setText(String.valueOf(LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText())));
	    } catch (IOException ex) {
		Logger.getLogger(newMainPageSmall.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
	this.boxMail_Jlist.setVisible(true);
	this.writeMail_Pn.setVisible(false);
	this.readMail_Pn.setVisible(true);
    }//GEN-LAST:event_boxMail_LbMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
	// TODO add your handling code here:
	System.exit(0);
    }//GEN-LAST:event_jLabel1MouseClicked
    private void untrash(){
	int selectedIndex = this.boxMail_Jlist.getSelectedIndex();
	if(selectedIndex != -1){
	    int response = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn Untrash thư này hay không?");
	    if(response == JOptionPane.YES_OPTION){
		MessageObject msgOb = messageInbox.get(selectedIndex);
		try {
		    MessageProcess.unTrash(msgOb.id);
		    boxMail_Jlist.remove(selectedIndex);
		    messageInbox.remove(selectedIndex);
		    JOptionPane.showMessageDialog(this, "Đã untrash thành công !");
		} catch (IOException ex) {
		    Logger.getLogger(newMainPageSmall.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }
	}
    }
    private void boxMail_JlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxMail_JlistMouseClicked
	// TODO add your handling code here: bấm vào để đọc mail
	
	// xử lý riêng cho khi load trash inbox: dùng right click để untrash
	// kiểm tra có phải right click không
	if(evt.getButton()== MouseEvent.BUTTON3 && loadingBoxName_Lb.equals("TRASH")){
	    untrash();
	}
	int chon = boxMail_Jlist.getSelectedIndex();
	if (chon != -1) {
	    mail_Pn.setVisible(true);
	    MessageObject msgOb = messageInbox.get(chon);
	    MessageProcess.loadMessage(msgOb);
	    from_Tf.setText(msgOb.from);
	    to_Tf.setText(msgOb.to);
	    cc_Tf.setText(msgOb.cc);
	    subject_Tf.setText(msgOb.subject);
	    date_Tf.setText(msgOb.date);
	    mainText_Tarea.setText(msgOb.mainText);
	    // load file len
	    DefaultComboBoxModel model = new DefaultComboBoxModel();
	    for (Map.Entry m : msgOb.listFile.entrySet()) {
		model.addElement(m.getKey());
	    }
	    this.fileAttachRead_Jcb.setModel(model);
	}
    }//GEN-LAST:event_boxMail_JlistMouseClicked

    private void fileAttachWrite_JcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAttachWrite_JcbActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_fileAttachWrite_JcbActionPerformed

    private void addFileWrite_BtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileWrite_BtActionPerformed
	// TODO add your handling code here:
	String filePath = XuLyFile.showOpenFileDialog();
	this.fileAttachWrite_Jcb.addItem(filePath);
    }//GEN-LAST:event_addFileWrite_BtActionPerformed

    private void send_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_send_LbMouseClicked
	// TODO add your handling code here:
	if (checkMail(this.to_Tf.getText()) == true) {
	    // gọi hàm để lấy thông tin và gửi mail
	    clickSentMail();
	    // clean các trường để nhập mail
	    cleanReadMailPanel();
	    // xoá đi list file đính kèm khi đã gửi mail
	    this.fileAttachWrite_Jcb.removeAllItems();
	    // xoá đi tool tip hướng dẫn
	    this.bcc_Tf.setToolTipText("");
	    this.cc_Tf.setToolTipText("");
	    this.to_Tf.setToolTipText("");
	} else {
	    JOptionPane.showMessageDialog(this, "Bạn vừa nhập sai format mail của người nhận! Vui lòng kiểm tra kĩ !");
	}

    }//GEN-LAST:event_send_LbMouseClicked

    private void fileAttachRead_JcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAttachRead_JcbActionPerformed
	// TODO add your handling code here:
	String pathDir = XuLyFile.showOpenDirDialog();
	if (pathDir.equals("")) {
	    return;
	}
	try {
	    // lấy tên file để tạo đường dẫn
	    String fileName = (String) this.fileAttachRead_Jcb.getSelectedItem();
	    String fileAttId;
	    // lấy Index của file download để tìm msgOb chứa nó
	    int chon = this.fileAttachRead_Jcb.getSelectedIndex();
	    MessageObject msgOb = messageInbox.get(chon);
	    // lấy Id của file download file dựa vào Id
	    fileAttId = msgOb.listFile.get(fileName);
	    //download file
	    MessageProcess.downloadAttach(msgOb.id, fileAttId, pathDir + fileName);
	} catch (IOException ex) {
	    Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
	}
    }//GEN-LAST:event_fileAttachRead_JcbActionPerformed

    private void downMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downMail_LbMouseClicked
	// TODO add your handling code here:
	String pathDir = XuLyFile.showOpenDirDialog();
	if (pathDir.equals("")) {
	    return;
	}
	int chon = this.boxMail_Jlist.getSelectedIndex();
	MessageObject msgOb = messageInbox.get(chon);
	MessageProcess.downloadMail(msgOb, pathDir);
	JOptionPane.showMessageDialog(this, "Bạn đã download thành công!");
    }//GEN-LAST:event_downMail_LbMouseClicked

    private void search_TfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_TfKeyPressed
	// TODO add your handling code here:
	if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
	    // set label cho Jlist hiển thị là search result
	    this.loadingBoxName_Lb.setText("Search result");
	    // lấy về query người dùng nhập
	    String searchQuery = this.search_Tf.getText();
	    try {
		List<MessageObject> searchlist = MessageProcess.search(searchQuery);
		// khởi tạo Listmodel mới để đổ dữ liệu vào
		// mà không dùng listmodel cũ , vì có thể vô tình xoá đi mất inboxModel hoặc trashModel
		DefaultListModel searchMailModel =  new DefaultListModel();
		// load kết quả tìm được vào Model
		for (int i = 0; i < searchlist.size(); i++) {
		    searchMailModel.add(i, searchlist.get(i));
		}
		// set Model cho Jlist
		boxMail_Jlist.setModel(searchMailModel);                      
		boxMail_Jlist.setCellRenderer(new mailListRender("SEARCH"));
		
	    } catch (IOException | MessagingException ex) {
		Logger.getLogger(newMainPageSmall.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
    }//GEN-LAST:event_search_TfKeyPressed

    private void fileAttachWrite_JcbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAttachWrite_JcbKeyPressed
	// TODO add your handling code here:
	// nếu key đang press là delete key thì xoá Item được chọn
	if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
	    int selectedIndex = this.fileAttachWrite_Jcb.getSelectedIndex();
	    this.fileAttachWrite_Jcb.removeItemAt(selectedIndex);
	}
    }//GEN-LAST:event_fileAttachWrite_JcbKeyPressed

    private void logout_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logout_LbMouseClicked
	// TODO add your handling code here:
	int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn Đăng xuất: " + GlobalVariable.userId + " không?");
	if (showConfirmDialog == JOptionPane.YES_OPTION) {
	    // nếu muốn đăng xuất thì đóng mainPage lại
	    this.dispose();
	}
	// hiện lại login page
	parentFrame.setVisible(true);
    }//GEN-LAST:event_logout_LbMouseClicked

    private void moveToTrash_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveToTrash_LbMouseClicked
	// TODO add your handling code here:
	// lấy index phần tử cần move to trash
	int chon = boxMail_Jlist.getSelectedIndex();
	// nếu chưa chọn thì index =-1, không làm gì cả, nếu khác thì mới chạy code
	if (chon != -1) {
	    int confirmResponse = JOptionPane.showConfirmDialog(this, "Bạn có chăc muốn đưa mail này vào thùng rác không?");
	    if (confirmResponse == JOptionPane.YES_OPTION) {

		MessageObject msgOb = messageInbox.get(chon);
		try {
		    MessageProcess.moveToTrash(msgOb.id);
		    cleanReadMailPanel();
		    DefaultListModel listMail = (DefaultListModel) boxMail_Jlist.getModel();
		    listMail.remove(chon);
		    boxMail_Jlist.setModel(listMail);
		    messageInbox.remove(chon);
		} catch (IOException ex) {
		    Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }
	}
    }//GEN-LAST:event_moveToTrash_LbMouseClicked

    private void cancel_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_LbMouseClicked
	// TODO add your handling code here:
	int responseChoose = JOptionPane.showConfirmDialog(this, "Bạn có muốn lưu lại thư nháp?");
	if (responseChoose == JOptionPane.YES_OPTION) {
	    // nếu muốn tạo nháp
	    clickDraft();
	} else if (responseChoose == JOptionPane.NO_OPTION) {
	    // không tạo nháp mà xoá luôn
	    cleanReadMailPanel();
	}
    }//GEN-LAST:event_cancel_LbMouseClicked

    private void reload_BtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reload_BtActionPerformed
	// TODO add your handling code here:
	if (loadingBoxName_Lb.getText().equals("INBOX")) {
	    reloadBoxMail();
	}
    }//GEN-LAST:event_reload_BtActionPerformed

    private void trashMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trashMail_LbMouseClicked
	// TODO add your handling code here:
	loadingBoxName_Lb.setText("TRASH"); //set label hiển thị tên label đang load
	// hiển thị số lượng mail đang có trong box
	try {
	    this.countMailLoading_Lb.setText(String.valueOf(LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText())));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPageSmall.class.getName()).log(Level.SEVERE, null, ex);
	}
	// nếu là lần đầu bấm vào, listMode chưa được set thì khởi tạo
	if (trashMailMode == null) {
	    // khởi tạo new model
	    trashMailMode = new DefaultListModel();
	    //gán model cho Jlist
	    boxMail_Jlist.setModel(trashMailMode);
	    // load label TRASH và gán vào Jlist
	    loadTrashMailBox();
	} else {
	    //nếu là lần thứ 2 trở đi bấm vào thì chỉ set lại model lên mà ko load lại dữ liệu
	    boxMail_Jlist.setModel(trashMailMode);
	    boxMail_Jlist.setCellRenderer(new mailListRender("TRASH"));
	}
	this.boxMail_Jlist.setVisible(true);
	this.writeMail_Pn.setVisible(false);
	this.readMail_Pn.setVisible(true);
    }//GEN-LAST:event_trashMail_LbMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//	/* Set the Nimbus look and feel */
//	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//	 */
//	try {
//	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//		if ("Nimbus".equals(info.getName())) {
//		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//		    break;
//		}
//	    }
//	} catch (ClassNotFoundException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	} catch (InstantiationException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	} catch (IllegalAccessException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	}
//	//</editor-fold>
//	//</editor-fold>
//
//	/* Create and display the form */
//	java.awt.EventQueue.invokeLater(new Runnable() {
//	    public void run() {
//		new newMainPage().setVisible(true);
//	    }
//	});
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFileWrite_Bt;
    private javax.swing.JLabel bcc_Lb;
    private javax.swing.JTextField bcc_Tf;
    public javax.swing.JList<MessageObject> boxMail_Jlist;
    private javax.swing.JLabel boxMail_Lb;
    private javax.swing.JLabel cancel_Lb;
    private javax.swing.JLabel cc_Lb;
    private javax.swing.JTextField cc_Tf;
    private javax.swing.JLabel countMailLoading_Lb;
    private javax.swing.JLabel date_Lb;
    private javax.swing.JTextField date_Tf;
    private javax.swing.JLabel downMail_Lb;
    private javax.swing.JPanel dynamic_option_read_writeMenu_Pn;
    private javax.swing.JComboBox<String> fileAttachRead_Jcb;
    private javax.swing.JLabel fileAttachRead_Lb;
    public javax.swing.JComboBox<String> fileAttachWrite_Jcb;
    private javax.swing.JLabel fileAttachWrite_Lb;
    private javax.swing.JLabel from_Lb;
    private javax.swing.JTextField from_Tf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JLabel loadingBoxName_Lb;
    public static javax.swing.JLabel loginingUser_Lb;
    private javax.swing.JLabel logout_Lb;
    private javax.swing.JPanel mailBox_Pn;
    private javax.swing.JPanel mail_Pn;
    private javax.swing.JTextArea mainText_Tarea;
    private javax.swing.JLabel menu_Lb;
    private javax.swing.JPanel menu_Pn;
    private javax.swing.JLabel moveToTrash_Lb;
    private javax.swing.JLabel newMail_Lb;
    private javax.swing.JPanel readMail_Pn;
    private javax.swing.JButton reload_Bt;
    private javax.swing.JLabel reply_Lb;
    private javax.swing.JLabel searchIcon_Lb;
    private javax.swing.JTextField search_Tf;
    private javax.swing.JLabel send_Lb;
    private javax.swing.JLabel subject_Lb;
    private javax.swing.JTextField subject_Tf;
    private javax.swing.JLabel to_Lb;
    private javax.swing.JTextField to_Tf;
    private javax.swing.JPanel topMenu_Pn;
    private javax.swing.JLabel trashMail_Lb;
    private javax.swing.JPanel waiting_Pn;
    private javax.swing.JPanel writeMail_Pn;
    // End of variables declaration//GEN-END:variables

    private void loadMsgObToJlist(String loadLabel) {
	// load label nào thì set text label đấy
	loadingBoxName_Lb.setText(loadLabel);
	// get model hiện tại của Jlist
	DefaultListModel listMailModel = (DefaultListModel) boxMail_Jlist.getModel(); // khởi tạo Listmodel để đổ dữ liệu vào
	listMailModel.removeAllElements();
	try {
	    // khởi tạo List<MessageObject> bằng hàm initInboxList()
	    messageInbox = Init.initInboxList(loadLabel);
	    // set model cho 
	    boxMail_Jlist.setModel(listMailModel);                      // đổ dữ liệu từ listmodel đã tạo ở trên vào cái hiển thị
	    boxMail_Jlist.setCellRenderer(new mailListRender(loadLabel));   // set các cell trong list lại .
	    // đưa từng object lên model
	    for (int i = 0; i < messageInbox.size(); i++) {
		listMailModel.add(i, messageInbox.get(i));
	    }
	} catch (FailToLoadInitInboxException ex) {
	    Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
	}
    }

    private void loadStartUpMailBox() {
	String loadStartUpLabel = "INBOX";
	try {
	    this.countMailLoading_Lb.setText(String.valueOf(LabelProcess.countAllMailLabel(loadStartUpLabel)));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPageSmall.class.getName()).log(Level.SEVERE, null, ex);
	}
	if (GlobalVariable.internetOn == true) {
	    DefaultListModel listMailMode = new DefaultListModel();
	    boxMail_Jlist.setModel(listMailMode);
	    loadMsgObToJlist(loadStartUpLabel);
	    inboxMailMode = (DefaultListModel) boxMail_Jlist.getModel(); // lưu lại inbox model
	} else {

	}
    }

    private void loadTrashMailBox() {
	try {
	    this.countMailLoading_Lb.setText(String.valueOf(LabelProcess.countAllMailLabel("TRASH")));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPageSmall.class.getName()).log(Level.SEVERE, null, ex);
	}
	loadMsgObToJlist("TRASH");
    }

    private void reloadBoxMail() {
	//load lại số lượng mail của box đang hiện trên list
	try {
	    this.countMailLoading_Lb.setText(String.valueOf(LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText())));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPageSmall.class.getName()).log(Level.SEVERE, null, ex);
	}
	// load lại jlist dựa vào label đang load
	loadMsgObToJlist(this.loadingBoxName_Lb.getText());
    }

    private void cleanReadMailPanel() {
	from_Tf.setText("");
	bcc_Tf.setText("");
	cc_Tf.setText("");
	subject_Tf.setText("");
	to_Tf.setText("");
	mainText_Tarea.setText("");
	this.fileAttachRead_Jcb.removeAllItems();
	date_Tf.setText("");
    }

    /**
     * kiểm tra các trường dữ liệu khi click gửi mail đi và gửi mail
     */
    public void clickSentMail() {
	String[] bcc = null;
	String[] cc = null;
	String[] to = null;
	List<String> listFile = null;
	if (this.to_Tf.getText().equals("")) {
	    JOptionPane.showMessageDialog(this, "Bạn chưa nhập mail người cần nhận ! Xin vui lòng nhập đầy đủ !");
	} else {
	    if (!this.bcc_Tf.getText().isEmpty()) {
		bcc = this.bcc_Tf.getText().split(";");
	    }
	    if (!this.cc_Tf.getText().isEmpty()) {
		cc = this.cc_Tf.getText().split(";");
	    }
	    if (!this.to_Tf.getText().isEmpty()) {
		to = this.to_Tf.getText().split(";");
	    }
	    String subject = this.subject_Tf.getText();
	    String mainText = this.mainText_Tarea.getText();
	    int numOfFile = this.fileAttachWrite_Jcb.getItemCount();
	    if (numOfFile != 0) {
		listFile = new ArrayList<>();
		for (int i = 0; i < numOfFile; i++) {
		    listFile.add(this.fileAttachWrite_Jcb.getItemAt(i));
		}
	    }
	    SendMailProcess newMail = new SendMailProcess(to, cc, bcc, subject, mainText, listFile);
	    try {
		newMail.setUpAndSend();
		JOptionPane.showMessageDialog(this, "Bạn đã gửi mail thành công !");
	    } catch (MessagingException | IOException ex) {
		Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
		JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi trong quá trình gửi mail !");
	    }
	}
    }

    /**
     * kiểm tra các trường dữ liệu khi click cancel khi đang soạn mail và tạo
     * thư nháp
     */
    public void clickDraft() {
	String[] bcc = null;
	String[] cc = null;
	String[] to = null;
	List<String> listFile = null;

	if (!this.bcc_Tf.getText().isEmpty()) {
	    bcc = this.bcc_Tf.getText().split(";");
	}
	if (!this.cc_Tf.getText().isEmpty()) {
	    cc = this.cc_Tf.getText().split(";");
	}
	if (!this.to_Tf.getText().isEmpty()) {
	    to = this.to_Tf.getText().split(";");
	}
	String subject = this.subject_Tf.getText();
	String mainText = this.mainText_Tarea.getText();
	int numOfFile = this.fileAttachWrite_Jcb.getItemCount();
	if (numOfFile != 0) {
	    listFile = new ArrayList<>();
	    for (int i = 0; i < numOfFile; i++) {
		listFile.add(this.fileAttachWrite_Jcb.getItemAt(i));
	    }
	}
	SendMailProcess draftMail = new SendMailProcess(to, cc, bcc, subject, mainText, listFile);
	draftMail.createDraft(GlobalVariable.getService(), GlobalVariable.userId);
	JOptionPane.showMessageDialog(this, "Bạn đã lưu nháp thành công !");
	cleanReadMailPanel();
    }
}
