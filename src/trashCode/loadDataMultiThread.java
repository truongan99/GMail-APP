/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trashCode;

import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.ListMessagesResponse;
import com.google.api.services.gmail.model.Message;
import customException.WrongLoginInfoException;
import gmailApi.GlobalVariable;
import gmailApi.LoginProcess;
import gmailApi.MessageObject;
import gmailApi.MessageProcess;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.SwingWorker;

/**
 *
 * @author Admin
 */
public class loadDataMultiThread extends javax.swing.JFrame {

    /**
     * Creates new form loadDataMultiThread
     */
    public loadDataMultiThread() {
	initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loadData_JList = new javax.swing.JList<>();
        loadData_bt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(loadData_JList);

        loadData_bt.setText("Load Data");
        loadData_bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadData_btActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(loadData_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(316, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadData_bt, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData_btActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadData_btActionPerformed
	// TODO add your handling code here:
//	DefaultListModel model = new DefaultListModel();
//	this.loadData_JList.setModel(model);
//	loadDataThreadsssssss th1 = new loadDataThread(model);
//	th1.start();
//	while(th1.isAlive()){
//	    try {
//		model = (DefaultListModel) this.loadData_JList.getModel();
//		this.loadData_JList.setModel(model);
//		this.loadData_JList.setVisible(true);
//		Thread.sleep(2000);
//	    } catch (InterruptedException ex) {
//		Logger.getLogger(loadDataMultiThread.class.getName()).log(Level.SEVERE, null, ex);
//	    }s
//	}
	DefaultListModel model = new DefaultListModel();
	loadData_JList.setModel(model);
	startThread();
    }//GEN-LAST:event_loadData_btActionPerformed
    Gmail service;
    String userId;
    List<String> loadFromLabel = new ArrayList<>();
    public void startThread() {
	SwingWorker sw1 = new SwingWorker() {
	    @Override
	    protected String doInBackground() throws Exception {
		ListMessagesResponse response;

		try {
		    userId = "testdoan123456@gmail.com";
		    GlobalVariable.userId = userId;
		    LoginProcess.login();
		    service = GlobalVariable.getService();

		    response = service.users().messages().list(userId).setLabelIds(loadFromLabel).setMaxResults(Long.valueOf(2)).execute();
		    List<Message> messages = new ArrayList<>();
		    try {
			while (response.getMessages() != null) {
			    messages.addAll(response.getMessages());
			    for (Message msg : messages) {
				MessageObject newMessOb = MessageProcess.getQuickHeaderInfo(msg.getId());
				publish(msg.getId() +" ( ) " + newMessOb.subject);
				Thread.sleep(1000);
			    }
			    
			    if (response.getNextPageToken() != null) {
				String pageToken = response.getNextPageToken();
				response = service.users().messages().list(userId).setLabelIds(loadFromLabel).setPageToken(pageToken).execute();
			    } else {
				break;
			    }
			}
		    } catch (IOException ex) {
		    } catch (InterruptedException ex) {
			Logger.getLogger(loadDataThread.class.getName()).log(Level.SEVERE, null, ex);
		    }
		} catch (WrongLoginInfoException | IOException ex) {
		    Logger.getLogger(loadDataThread.class.getName()).log(Level.SEVERE, null, ex);
		}

		String res = "Finish loading";
		return res;
	    }

	    @Override
	    protected void process(List chunks) {
		String val = (String) chunks.get(chunks.size() - 1);
//		MessageObject previousOb = (MessageObject) chunks.get(chunks.size() - 1);
		DefaultListModel model = (DefaultListModel) loadData_JList.getModel();
		model.addElement(val);
		loadData_JList.setModel(model);
	    }

	    @Override
	    protected void done() {
		// this method is called when the background  
		// thread finishes execution 
		try {
		    String statusMsg = (String) get();
		    System.out.println("Inside done function");
		    loadData_bt.setText(statusMsg);

		} catch (InterruptedException e) {
		    e.printStackTrace();
		} catch (ExecutionException e) {
		    e.printStackTrace();
		}

	    }
	};
	sw1.execute();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	/* Set the Nimbus look and feel */
	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	 */
	try {
	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
		if ("Nimbus".equals(info.getName())) {
		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
		    break;
		}
	    }
	} catch (ClassNotFoundException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (InstantiationException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (IllegalAccessException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
	    java.util.logging.Logger.getLogger(loadDataMultiThread.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	}
	//</editor-fold>

	/* Create and display the form */
	java.awt.EventQueue.invokeLater(new Runnable() {
	    public void run() {
		new loadDataMultiThread().setVisible(true);
	    }
	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> loadData_JList;
    private javax.swing.JButton loadData_bt;
    // End of variables declaration//GEN-END:variables
}
