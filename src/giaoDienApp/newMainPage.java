/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package giaoDienApp;

import trashCode.loadDataThread;
import trashCode.index;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.Draft;
import com.google.api.services.gmail.model.ListMessagesResponse;
import com.google.api.services.gmail.model.Message;
import customException.FailToLoadInitInboxException;
import customException.WrongLoginInfoException;
import gmailApi.GlobalVariable;
import gmailApi.Init;
import gmailApi.LabelProcess;
import gmailApi.LoginProcess;
import static gmailApi.LoginProcess.checkMail;
import gmailApi.MessageObject;
import gmailApi.MessageProcess;
import gmailApi.SendMailProcess;
import gmailApi.SendMailProcessBuilder;
import gmailApi.XuLyFile;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Admin
 */
public class newMainPage extends javax.swing.JFrame {

    /**
     * Creates new form newMainPage
     */
    GridBagLayout layout = new GridBagLayout();
//    ReadMailOption_Pn readMail_pn = new ReadMailOption_Pn(messageInbox);
//    WriteMailOption_Pn writeMail_pn = new WriteMailOption_Pn();
    private newLogin parentFrame;
    DefaultListModel inboxMailMode = null;
    int countInboxLabel = 0;
    DefaultListModel trashMailMode = null;
    int countTrashLabel = 0;
    DefaultListModel sentMailMode = null;
    int countSentLabel = 0;
    SwingWorker sw1;

    public newMainPage(newLogin parentFrame) {
	this.parentFrame = parentFrame;
	initComponents();
	// set size cho 2 Pn load động
	readMail_Pn.setSize(870, 60);
	writeMail_Pn.setSize(870, 60);
	// set gridBagLayout cho Pn cha
	this.dynamic_option_read_writeMenu_Pn.setLayout(layout);
	GridBagConstraints c = new GridBagConstraints();
	c.gridx = 0;
	c.gridy = 0;
	// load panelread con lên panel cha
	this.dynamic_option_read_writeMenu_Pn.add(readMail_Pn);
	c.gridx = 0;
	c.gridy = 0;
	// load panelread con lên panel cha
	this.dynamic_option_read_writeMenu_Pn.add(writeMail_Pn);
	// hiện panelread con, ẩn panelwrite con
	readMail_Pn.setVisible(true);
	writeMail_Pn.setVisible(false);
	// load mail khởi đầu chương trình
	loadStartUpMailBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        writeMail_Pn = new javax.swing.JPanel();
        fileAttachWrite_Lb = new javax.swing.JLabel();
        fileAttachWrite_Jcb = new javax.swing.JComboBox<>();
        addFileWrite_Bt = new javax.swing.JButton();
        cancel_Lb = new javax.swing.JLabel();
        send_Lb = new javax.swing.JLabel();
        readMail_Pn = new javax.swing.JPanel();
        fileAttachRead_Lb = new javax.swing.JLabel();
        fileAttachRead_Jcb = new javax.swing.JComboBox<>();
        downMail_Lb = new javax.swing.JLabel();
        moveToTrash_Lb = new javax.swing.JLabel();
        reply_Lb = new javax.swing.JLabel();
        starred_CheckBox = new javax.swing.JCheckBox();
        forward_Lb = new javax.swing.JLabel();
        menu_Pn = new javax.swing.JPanel();
        menu_Lb = new javax.swing.JLabel();
        newMail_Lb = new javax.swing.JLabel();
        boxMail_Lb = new javax.swing.JLabel();
        trashMail_Lb = new javax.swing.JLabel();
        logout_Lb = new javax.swing.JLabel();
        daGui_Lb = new javax.swing.JLabel();
        draft_Lb = new javax.swing.JLabel();
        moreLabel_JCb = new javax.swing.JComboBox<>();
        mail_Pn = new javax.swing.JPanel();
        from_Lb = new javax.swing.JLabel();
        from_Tf = new javax.swing.JTextField();
        to_Lb = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        to_Tf = new javax.swing.JTextField();
        date_Lb = new javax.swing.JLabel();
        date_Tf = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        cc_Lb = new javax.swing.JLabel();
        cc_Tf = new javax.swing.JTextField();
        bcc_Tf = new javax.swing.JTextField();
        bcc_Lb = new javax.swing.JLabel();
        subject_Tf = new javax.swing.JTextField();
        subject_Lb = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jScrollPane3 = new javax.swing.JScrollPane();
        mainText_Tarea = new javax.swing.JTextArea();
        topMenu_Pn = new javax.swing.JPanel();
        searchIcon_Lb = new javax.swing.JLabel();
        search_Tf = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        loginingUser_Lb = new javax.swing.JLabel();
        exit_Lb = new javax.swing.JLabel();
        mailBox_Pn = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        boxMail_Jlist = new javax.swing.JList<>();
        loadingBoxName_Lb = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        countMailLoading_Lb = new javax.swing.JLabel();
        reload_Bt = new javax.swing.JButton();
        dynamic_option_read_writeMenu_Pn = new javax.swing.JPanel();

        writeMail_Pn.setBackground(new java.awt.Color(34, 92, 145));
        writeMail_Pn.setMinimumSize(new java.awt.Dimension(870, 60));
        writeMail_Pn.setName(""); // NOI18N
        writeMail_Pn.setPreferredSize(new java.awt.Dimension(870, 60));
        writeMail_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fileAttachWrite_Lb.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        fileAttachWrite_Lb.setForeground(new java.awt.Color(255, 255, 255));
        fileAttachWrite_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add_file_30px.png"))); // NOI18N
        fileAttachWrite_Lb.setText("File");
        writeMail_Pn.add(fileAttachWrite_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 90, 40));

        fileAttachWrite_Jcb.setToolTipText("Bạn có thể chọn file cần xoá và ấn Delete để xoá file !");
        fileAttachWrite_Jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAttachWrite_JcbActionPerformed(evt);
            }
        });
        fileAttachWrite_Jcb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileAttachWrite_JcbKeyPressed(evt);
            }
        });
        writeMail_Pn.add(fileAttachWrite_Jcb, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 280, 40));

        addFileWrite_Bt.setBackground(new java.awt.Color(34, 92, 145));
        addFileWrite_Bt.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        addFileWrite_Bt.setText("Open");
        addFileWrite_Bt.setBorder(null);
        addFileWrite_Bt.setBorderPainted(false);
        addFileWrite_Bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileWrite_BtActionPerformed(evt);
            }
        });
        writeMail_Pn.add(addFileWrite_Bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 11, 50, 40));

        cancel_Lb.setFont(new java.awt.Font("Consolas", 1, 26)); // NOI18N
        cancel_Lb.setForeground(new java.awt.Color(204, 204, 204));
        cancel_Lb.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cancel_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancel_30px.png"))); // NOI18N
        cancel_Lb.setText(" Cancel");
        cancel_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancel_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancel_LbMouseClicked(evt);
            }
        });
        writeMail_Pn.add(cancel_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, -1, 40));

        send_Lb.setFont(new java.awt.Font("Consolas", 1, 26)); // NOI18N
        send_Lb.setForeground(new java.awt.Color(204, 204, 204));
        send_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/sent_30px.png"))); // NOI18N
        send_Lb.setText(" Send");
        send_Lb.setToolTipText("");
        send_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        send_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                send_LbMouseClicked(evt);
            }
        });
        writeMail_Pn.add(send_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 10, -1, 40));

        readMail_Pn.setBackground(new java.awt.Color(34, 92, 145));
        readMail_Pn.setMinimumSize(new java.awt.Dimension(870, 60));
        readMail_Pn.setPreferredSize(new java.awt.Dimension(870, 60));
        readMail_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fileAttachRead_Lb.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        fileAttachRead_Lb.setForeground(new java.awt.Color(255, 255, 255));
        fileAttachRead_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/attach_30px.png"))); // NOI18N
        fileAttachRead_Lb.setText("File");
        readMail_Pn.add(fileAttachRead_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 70, 40));

        fileAttachRead_Jcb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileAttachRead_JcbActionPerformed(evt);
            }
        });
        readMail_Pn.add(fileAttachRead_Jcb, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 300, 40));

        downMail_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        downMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/download_30px.png"))); // NOI18N
        downMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        downMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downMail_LbMouseClicked(evt);
            }
        });
        readMail_Pn.add(downMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 0, 50, 60));

        moveToTrash_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        moveToTrash_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/remove_30px.png"))); // NOI18N
        moveToTrash_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        moveToTrash_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moveToTrash_LbMouseClicked(evt);
            }
        });
        readMail_Pn.add(moveToTrash_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 0, 50, 60));

        reply_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reply_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reply_30px.png"))); // NOI18N
        reply_Lb.setLabelFor(reply_Lb);
        reply_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reply_Lb.setMaximumSize(new java.awt.Dimension(40, 40));
        reply_Lb.setName("reply"); // NOI18N
        reply_Lb.setPreferredSize(new java.awt.Dimension(40, 40));
        reply_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reply_LbMouseClicked(evt);
            }
        });
        readMail_Pn.add(reply_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 50, 50));

        starred_CheckBox.setBackground(new java.awt.Color(34, 92, 145));
        starred_CheckBox.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        starred_CheckBox.setForeground(new java.awt.Color(247, 231, 231));
        starred_CheckBox.setText("STARRED");
        starred_CheckBox.setToolTipText("");
        starred_CheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        starred_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starred_CheckBoxActionPerformed(evt);
            }
        });
        readMail_Pn.add(starred_CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 100, 40));

        forward_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/forward_arrow_30px.png"))); // NOI18N
        forward_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                forward_LbMouseClicked(evt);
            }
        });
        readMail_Pn.add(forward_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 0, 40, 60));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        setUndecorated(true);

        menu_Pn.setBackground(new java.awt.Color(34, 92, 145));
        menu_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menu_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/menu_30px.png"))); // NOI18N
        menu_Pn.add(menu_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 13, -1, -1));

        newMail_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add_mail_50px.png"))); // NOI18N
        newMail_Lb.setToolTipText("Tạo và gửi mail mới");
        newMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newMail_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(newMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 70, 70));

        boxMail_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        boxMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mailer_50px.png"))); // NOI18N
        boxMail_Lb.setToolTipText("Xem hộp thư đến");
        boxMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        boxMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boxMail_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(boxMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 70, 70));

        trashMail_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        trashMail_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_trash_48.png"))); // NOI18N
        trashMail_Lb.setToolTipText("Xem hộp thư rác");
        trashMail_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trashMail_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trashMail_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(trashMail_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 70, 70));

        logout_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logout_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logout_50px.png"))); // NOI18N
        logout_Lb.setToolTipText("Đăng xuất");
        logout_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logout_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(logout_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 670, 70, 60));

        daGui_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        daGui_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/send_email_50px.png"))); // NOI18N
        daGui_Lb.setToolTipText("Hộp thư đã gửi");
        daGui_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        daGui_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                daGui_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(daGui_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 70, 70));

        draft_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        draft_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/draft_50px.png"))); // NOI18N
        draft_Lb.setToolTipText("Hộp thư Nháp");
        draft_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        draft_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                draft_LbMouseClicked(evt);
            }
        });
        menu_Pn.add(draft_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 70, 60));

        moreLabel_JCb.setBackground(new java.awt.Color(34, 92, 145));
        moreLabel_JCb.setEditable(true);
        moreLabel_JCb.setFont(new java.awt.Font("Consolas", 1, 16)); // NOI18N
        moreLabel_JCb.setForeground(new java.awt.Color(250, 220, 220));
        moreLabel_JCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "More", "IMPORTANT", "SPAM", " " }));
        moreLabel_JCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreLabel_JCbActionPerformed(evt);
            }
        });
        menu_Pn.add(moreLabel_JCb, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 570, 70, 40));

        mail_Pn.setBackground(new java.awt.Color(161, 233, 237));
        mail_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        from_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        from_Lb.setText("From");
        mail_Pn.add(from_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 40));

        from_Tf.setBackground(new java.awt.Color(161, 233, 237));
        from_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        from_Tf.setBorder(null);
        from_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                from_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(from_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 320, 30));

        to_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        to_Lb.setText("To");
        mail_Pn.add(to_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 320, 10));

        to_Tf.setBackground(new java.awt.Color(161, 233, 237));
        to_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        to_Tf.setBorder(null);
        to_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                to_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(to_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 730, 30));

        date_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        date_Lb.setText("Date");
        mail_Pn.add(date_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 30, -1, -1));

        date_Tf.setBackground(new java.awt.Color(161, 233, 237));
        date_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        date_Tf.setBorder(null);
        date_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(date_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, 300, 30));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, 300, 10));

        cc_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        cc_Lb.setText("Cc");
        mail_Pn.add(cc_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        cc_Tf.setBackground(new java.awt.Color(161, 233, 237));
        cc_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        cc_Tf.setBorder(null);
        mail_Pn.add(cc_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 730, 30));

        bcc_Tf.setBackground(new java.awt.Color(161, 233, 237));
        bcc_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        bcc_Tf.setBorder(null);
        mail_Pn.add(bcc_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 730, 30));

        bcc_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        bcc_Lb.setText("Bcc");
        mail_Pn.add(bcc_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        subject_Tf.setBackground(new java.awt.Color(161, 233, 237));
        subject_Tf.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        subject_Tf.setBorder(null);
        subject_Tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subject_TfActionPerformed(evt);
            }
        });
        mail_Pn.add(subject_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 730, 30));

        subject_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        subject_Lb.setText("Subject");
        mail_Pn.add(subject_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 730, 10));

        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 730, 20));

        jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 730, 10));

        jSeparator7.setForeground(new java.awt.Color(0, 0, 0));
        mail_Pn.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 732, 10));

        mainText_Tarea.setColumns(20);
        mainText_Tarea.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        mainText_Tarea.setRows(5);
        mainText_Tarea.setToolTipText("");
        jScrollPane3.setViewportView(mainText_Tarea);

        mail_Pn.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 850, 350));

        topMenu_Pn.setBackground(new java.awt.Color(255, 255, 255));
        topMenu_Pn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchIcon_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/search_32px.png"))); // NOI18N
        searchIcon_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchIcon_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchIcon_LbMouseClicked(evt);
            }
        });
        topMenu_Pn.add(searchIcon_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, -1, -1));

        search_Tf.setBorder(null);
        search_Tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search_TfKeyPressed(evt);
            }
        });
        topMenu_Pn.add(search_Tf, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 30));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        topMenu_Pn.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 210, 10));

        loginingUser_Lb.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        loginingUser_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_user_24px.png"))); // NOI18N
        topMenu_Pn.add(loginingUser_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 20, 270, 30));

        exit_Lb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete_30px.png"))); // NOI18N
        exit_Lb.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit_Lb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit_LbMouseClicked(evt);
            }
        });
        topMenu_Pn.add(exit_Lb, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 10, 30, 40));

        boxMail_Jlist.setFont(new java.awt.Font("Consolas", 0, 16)); // NOI18N
        boxMail_Jlist.setToolTipText("");
        boxMail_Jlist.setSelectionBackground(new java.awt.Color(255, 255, 255));
        boxMail_Jlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boxMail_JlistMouseClicked(evt);
            }
        });
        boxMail_Jlist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                boxMail_JlistValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(boxMail_Jlist);

        loadingBoxName_Lb.setBackground(new java.awt.Color(255, 255, 255));
        loadingBoxName_Lb.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        loadingBoxName_Lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadingBoxName_Lb.setText("INBOX");
        loadingBoxName_Lb.setToolTipText("");
        loadingBoxName_Lb.setFocusTraversalPolicyProvider(true);
        loadingBoxName_Lb.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jSeparator8.setForeground(new java.awt.Color(0, 0, 0));

        countMailLoading_Lb.setBackground(new java.awt.Color(255, 255, 255));
        countMailLoading_Lb.setFont(new java.awt.Font("Consolas", 0, 20)); // NOI18N

        reload_Bt.setBackground(new java.awt.Color(255, 255, 255));
        reload_Bt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/reset_30px.png"))); // NOI18N
        reload_Bt.setBorder(null);
        reload_Bt.setBorderPainted(false);
        reload_Bt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reload_Bt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reload_BtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mailBox_PnLayout = new javax.swing.GroupLayout(mailBox_Pn);
        mailBox_Pn.setLayout(mailBox_PnLayout);
        mailBox_PnLayout.setHorizontalGroup(
            mailBox_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailBox_PnLayout.createSequentialGroup()
                .addComponent(loadingBoxName_Lb, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(reload_Bt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mailBox_PnLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(countMailLoading_Lb, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(mailBox_PnLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1))
            .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        mailBox_PnLayout.setVerticalGroup(
            mailBox_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mailBox_PnLayout.createSequentialGroup()
                .addGroup(mailBox_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadingBoxName_Lb, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reload_Bt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countMailLoading_Lb, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addGap(2, 2, 2))
        );

        dynamic_option_read_writeMenu_Pn.setMinimumSize(new java.awt.Dimension(870, 60));
        dynamic_option_read_writeMenu_Pn.setName(""); // NOI18N

        javax.swing.GroupLayout dynamic_option_read_writeMenu_PnLayout = new javax.swing.GroupLayout(dynamic_option_read_writeMenu_Pn);
        dynamic_option_read_writeMenu_Pn.setLayout(dynamic_option_read_writeMenu_PnLayout);
        dynamic_option_read_writeMenu_PnLayout.setHorizontalGroup(
            dynamic_option_read_writeMenu_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 870, Short.MAX_VALUE)
        );
        dynamic_option_read_writeMenu_PnLayout.setVerticalGroup(
            dynamic_option_read_writeMenu_PnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menu_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topMenu_Pn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mailBox_Pn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mail_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dynamic_option_read_writeMenu_Pn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topMenu_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mailBox_Pn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mail_Pn, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dynamic_option_read_writeMenu_Pn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(menu_Pn, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void from_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_from_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_from_TfActionPerformed

    private void to_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_to_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_to_TfActionPerformed

    private void date_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_date_TfActionPerformed

    private void subject_TfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subject_TfActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_subject_TfActionPerformed

    /**
     * chuẩn bị giao diện cho việc nhập mail mới
     */
    public void newMailPrepare() {
	// set lại text hiển thị ở box và xoá đi số lượng hiển thị
	loadingBoxName_Lb.setText("NEW MAIL");
	countMailLoading_Lb.setText("");
	// xoá đi các tf ở phần đọc mail
	cleanReadMailPanel();
	// tắt đi list load mail
	this.boxMail_Jlist.setVisible(false);
	// hiển thị panel option khi viết mail
	this.writeMail_Pn.setVisible(true);
	// ẩn panel option khi đọc mail
	this.readMail_Pn.setVisible(false);
	// from không chỉnh sửa nên ko cho phép chỉnh sửa
	this.from_Tf.setEditable(false);
	// tự động set là userId đã đăng nhập
	this.from_Tf.setText(GlobalVariable.userId);
	// date cũng tự sinh ra mới, không cho sửa
	this.date_Tf.setEditable(false);
	this.date_Tf.setText((new Date()).toString());

	this.to_Tf.setEditable(true);
	this.cc_Tf.setEditable(true);
	this.bcc_Tf.setEditable(true);
	this.subject_Tf.setEditable(true);
	this.mainText_Tarea.setEditable(true);
	// thêm tool tips hướng dẫn việc gửi đến nhiều mail cùng lúc
	this.bcc_Tf.setToolTipText("Các mail đặt cách nhau bỏi dấu ';'");
	this.cc_Tf.setToolTipText("Các mail đặt cách nhau bỏi dấu ';'");
	this.to_Tf.setToolTipText("Các mail đặt cách nhau bỏi dấu ';'");
    }

    private void newMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newMail_LbMouseClicked
	// gọi tạo mail mới
	newMailPrepare();
    }//GEN-LAST:event_newMail_LbMouseClicked

    private void boxMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxMail_LbMouseClicked
	// TODO add your handling code here:
	// vì ban đầu là load cái box này lên trước,model đã có sẵn , nên khi bấm vào thì chỉ cần set lại model lên
	// mà không load lại từ đầu
	if (loadingBoxName_Lb.getText().equals("INBOX")) {
	    return;
	}

	loadingBoxName_Lb.setText("INBOX");
	try {
	    // lấy số lượng mail của INBOX hiện tại
	    int count = LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText());
	    // nếu số lượng mail đã load trước đó < số lượng mail vừa lấy từ Server về thì cần load lại hoặc là load chưa hết
	    if (boxMail_Jlist.getModel().getSize() < count) {
		// gọi hàm reload
		reloadBoxMail(countInboxLabel);
	    } else {
		boxMail_Jlist.setModel(inboxMailMode);                      // đổ dữ liệu từ listmodel đã tạo ở trên vào cái hiển thị
		boxMail_Jlist.setCellRenderer(new mailListRender("INBOX"));   // render các cell trong list lại .
		this.countMailLoading_Lb.setText(String.valueOf(boxMail_Jlist.getModel().getSize()));
	    }

	} catch (IOException ex) {
	    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	}

	cleanReadMailPanel();
	this.boxMail_Jlist.setVisible(true);
	this.writeMail_Pn.setVisible(false);
	this.readMail_Pn.setVisible(true);
    }//GEN-LAST:event_boxMail_LbMouseClicked

    private void exit_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_LbMouseClicked
	// TODO add your handling code here:
	System.exit(0);
    }//GEN-LAST:event_exit_LbMouseClicked
    private void untrash() {
//	int selectedIndex = this.boxMail_Jlist.getSelectedIndex();
	if (chooseMessage != -1) {
	    int response = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn Untrash thư này hay không?");
	    if (response == JOptionPane.YES_OPTION) {
		MessageObject msgOb = boxMail_Jlist.getModel().getElementAt(chooseMessage);
		try {
		    MessageProcess.unTrash(msgOb.id);
		    // lấy model hiện tại của box
		    DefaultListModel listMail = (DefaultListModel) boxMail_Jlist.getModel();
		    //remove ở index cần untrash
		    listMail.remove(chooseMessage);
		    //set lại model cho box
		    boxMail_Jlist.setModel(listMail);
		    JOptionPane.showMessageDialog(this, "Đã untrash thành công !");
		    // xoá đi readPanel mail đang hiện( là mail đang bị untrash)
		    cleanReadMailPanel();
		} catch (IOException ex) {
		    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }

	}
    }

    public int chooseMessage = -1;
    private void boxMail_JlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxMail_JlistMouseClicked
	// TODO add your handling code here: bấm vào để đọc mail

	// xử lý riêng cho khi load trash inbox: dùng right click để untrash
	// kiểm tra có phải right click không
	chooseMessage = boxMail_Jlist.getSelectedIndex();
	if (evt.getButton() == MouseEvent.BUTTON3 && loadingBoxName_Lb.getText().equals("TRASH")) {
	    // untrash 
	    untrash();
	} else {
	    if (loadingBoxName_Lb.getText().equals("DRAFT")) {
		newMailPrepare();
		this.boxMail_Jlist.setVisible(true);
		send_Lb.setText("Send draft");
		// xử lý send draft tiếp theo sẽ được xử lý ở event của nút send
	    } else {
		System.out.println("chooseIndex:" + chooseMessage); //test
		if (chooseMessage != -1) {
		    // hiện panel đọc mail
		    mail_Pn.setVisible(true);
		    // lấy cái object mail được chọn từ cái JList
		    MessageObject msgOb = boxMail_Jlist.getModel().getElementAt(chooseMessage);
		    // load dữ liệu ( header, body)
		    MessageProcess.loadMessage(msgOb);
		    // gán dữ liệu lên giao diện
		    from_Tf.setText(msgOb.from);
		    to_Tf.setText(msgOb.to);
		    cc_Tf.setText(msgOb.cc);
		    subject_Tf.setText(msgOb.subject);
		    date_Tf.setText(msgOb.date);
		    mainText_Tarea.setText(msgOb.mainText);
		    // kiểm tra cái message này có important không?
		    try {
			if (MessageProcess.checkImportant(MessageProcess.getMessageById(GlobalVariable.getService(), GlobalVariable.userId, msgOb.id))) {
			    this.starred_CheckBox.setSelected(true);
			} else {
			    this.starred_CheckBox.setSelected(false);
			}
		    } catch (IOException | MessagingException ex) {
			Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
		    }
		    // load file của mess lên combobox
		    DefaultComboBoxModel model = new DefaultComboBoxModel();
		    for (Map.Entry m : msgOb.listFile.entrySet()) {
			model.addElement(m.getKey());
		    }
		    this.fileAttachRead_Jcb.setModel(model);

		    // vì đã click vào nên nó sẽ bị set unread là false
		    msgOb.unread = false;
		    // set lại label cho mail đã bị đọc và render lại cái jlist 
		    List<String> labelsToRemove = new ArrayList<>();
		    labelsToRemove.add("UNREAD");
		    try {
			// set unread cho message rồi
			MessageProcess.modifyLabelsToMessage(new ArrayList<String>(), labelsToRemove, msgOb.id);
			//render lại cái Jlist 
			DefaultListModel modelJlist = (DefaultListModel) boxMail_Jlist.getModel();
			boxMail_Jlist.setCellRenderer(new mailListRender(loadingBoxName_Lb.getText()));
			boxMail_Jlist.setModel(modelJlist);
		    } catch (IOException ex) {
			Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
		    }
		}
		//re render
	    }
	}
    }//GEN-LAST:event_boxMail_JlistMouseClicked

    private void fileAttachWrite_JcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAttachWrite_JcbActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_fileAttachWrite_JcbActionPerformed

    private void addFileWrite_BtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileWrite_BtActionPerformed
	// TODO add your handling code here:
	String filePath = XuLyFile.showOpenFileDialog();
	this.fileAttachWrite_Jcb.addItem(filePath);
    }//GEN-LAST:event_addFileWrite_BtActionPerformed

    /**
     * kiểm tra các trường dữ liệu khi click gửi mail đi và gửi mail
     */
    public void clickSentMail() {
	String[] bcc = null;
	String[] cc = null;
	String[] to = null;
	List<String> listFile = null;
	// lấy bcc
	if (!this.bcc_Tf.getText().isEmpty()) {
	    bcc = this.bcc_Tf.getText().split(";");
	}
	//lấy cc
	if (!this.cc_Tf.getText().isEmpty()) {
	    cc = this.cc_Tf.getText().split(";");
	}
	//lấy to
	if (!this.to_Tf.getText().isEmpty()) {
	    to = this.to_Tf.getText().split(";");
	}
	// lấy subject,mainText có thì lấy , không thì kệ
	String subject = this.subject_Tf.getText();
	String mainText = this.mainText_Tarea.getText();
	// lấy về số lượng file muốn attach
	int numOfFile = this.fileAttachWrite_Jcb.getItemCount();
	//nếu khác 0 thì sẽ đưa vào list file đã làm tham số cho hàm gửi mail
	if (numOfFile != 0) {
	    listFile = new ArrayList<>();
	    for (int i = 0; i < numOfFile; i++) {
		listFile.add(this.fileAttachWrite_Jcb.getItemAt(i));
	    }
	}
//	    SendMailProcess newMail = new SendMailProcess(to, cc, bcc, subject, mainText, listFile);
	// build tham số cho sendMailProcess
	SendMailProcess newMail = new SendMailProcessBuilder().setToMail(to)
		.setCc(cc)
		.setBcc(bcc)
		.setBody(mainText)
		.setSubject(subject)
		.setFileName(listFile)
		.getSendMailProcess();
	// vì nút này có tận 2 chức năng là send mail thường hoặc send draft
	// nên sẽ phân biệt qua text hiện trên label
	if (send_Lb.getText().equals("Send draft")) {
	    // thực hiện gửi draft message
	    int chooseIndex = boxMail_Jlist.getSelectedIndex();
	    DefaultListModel model = (DefaultListModel) boxMail_Jlist.getModel();
	    Draft draft = (Draft) model.getElementAt(chooseIndex);
	    newMail.sendDraft(draft);
	} else {
	    // thực hiện gửi mail thường
	    try {
		newMail.setUpAndSend();
		JOptionPane.showMessageDialog(this, "Bạn đã gửi mail thành công !");
	    } catch (MessagingException | IOException ex) {
		Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
		JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi trong quá trình gửi mail !");
	    }
	}
    }
    private void send_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_send_LbMouseClicked
	// TODO add your handling code here:
	// kiểm tra địa chỉ mail cần gửi đến có nhập không
	boolean checkMail = true;
	if (this.to_Tf.getText().equals("")) {
	    JOptionPane.showMessageDialog(this, "Bạn chưa nhập mail người cần nhận ! Xin vui lòng nhập đầy đủ !");
	} else {
	    String mailto = to_Tf.getText().trim();
	    String[] listmailto = mailto.split(";");
	    for (String mail : listmailto) {
		checkMail = checkMail(mail);
	    }
	    // nếu có thì kiểm tra format có đúng không
	    if (checkMail) {
		// gọi hàm để lấy thông tin và gửi mail
		clickSentMail();
		// clean các trường để nhập mail
		cleanReadMailPanel();
		// xoá đi list file đính kèm khi đã gửi mail
		this.fileAttachWrite_Jcb.removeAllItems();
		// xoá đi tool tip hướng dẫn
		this.bcc_Tf.setToolTipText("");
		this.cc_Tf.setToolTipText("");
		this.to_Tf.setToolTipText("");
	    } else {
		JOptionPane.showMessageDialog(this, "Bạn vừa nhập sai format mail của người nhận! Vui lòng kiểm tra kĩ !");
	    }
	}

    }//GEN-LAST:event_send_LbMouseClicked

    private void fileAttachRead_JcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileAttachRead_JcbActionPerformed
	// TODO add your handling code here:
	String pathDir = XuLyFile.showOpenDirDialog();
	if (pathDir.equals("")) {
	    return;
	}
	try {
	    // lấy tên file để tạo đường dẫn
	    String fileName = (String) this.fileAttachRead_Jcb.getSelectedItem();
	    String fileAttId;
	    // lấy Index của file download để tìm msgOb chứa nó
	    int chooseIndex = this.fileAttachRead_Jcb.getSelectedIndex();
	    MessageObject msgOb = boxMail_Jlist.getModel().getElementAt(chooseIndex);
	    // lấy Id của file download file dựa vào Tên file vì HashMap<tên file, attach ID>
	    fileAttId = msgOb.listFile.get(fileName);
	    //download file
	    MessageProcess.downloadAttach(msgOb.id, fileAttId, pathDir + fileName);
	} catch (IOException ex) {
	    Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
	}
    }//GEN-LAST:event_fileAttachRead_JcbActionPerformed

    private void downMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downMail_LbMouseClicked
	// TODO add your handling code here:
	String pathDir = XuLyFile.showOpenDirDialog();
	if (pathDir.equals("")) {
	    return;
	}
	// lấy index của file cần down
	int chooseIndex = this.boxMail_Jlist.getSelectedIndex();
	// lấy object chứa file đó
	MessageObject msgOb = boxMail_Jlist.getModel().getElementAt(chooseIndex);
	// download object mail đã chọn
	MessageProcess.downloadMail(msgOb, pathDir);
	// thông báo thành công
	JOptionPane.showMessageDialog(this, "Bạn đã download thành công!");
    }//GEN-LAST:event_downMail_LbMouseClicked

    private void search_TfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_TfKeyPressed

    }//GEN-LAST:event_search_TfKeyPressed

    private void fileAttachWrite_JcbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileAttachWrite_JcbKeyPressed
	// chức năng xoá những file đã attach nhưng muốn xoá
	// nếu key đang press là delete key thì xoá Item được chọn
	if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
	    int selectedIndex = this.fileAttachWrite_Jcb.getSelectedIndex();
	    this.fileAttachWrite_Jcb.removeItemAt(selectedIndex);
	}
    }//GEN-LAST:event_fileAttachWrite_JcbKeyPressed

    private void logout_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logout_LbMouseClicked
	// TODO add your handling code here:
	int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn Đăng xuất: " + GlobalVariable.userId + " không?");
	if (showConfirmDialog == JOptionPane.YES_OPTION) {
	    // nếu muốn đăng xuất thì đóng mainPage lại
	    this.dispose();
	}
	// hiện lại login page
	parentFrame.setVisible(true);
    }//GEN-LAST:event_logout_LbMouseClicked

    private void moveToTrash_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moveToTrash_LbMouseClicked
	// TODO add your handling code here:
	// nếu mà đang ở box TRash thì out luôn vì nó đang trash rồi còn move to trash nữa :> 
	if (loadingBoxName_Lb.getText().equals("TRASH")) {
	    return;
	}
	// lấy index phần tử cần move to trash
//	int chooseIndex = boxMail_Jlist.getSelectedIndex();
	System.out.println("chooseIndex trash " + chooseMessage);
	// nếu chưa chọn thì index =-1, không làm gì cả, nếu khác thì mới chạy code
	if (chooseMessage != -1) {
	    int confirmResponse = JOptionPane.showConfirmDialog(this, "Bạn có chăc muốn đưa mail này vào thùng rác không?");
	    if (confirmResponse == JOptionPane.YES_OPTION) {

		MessageObject msgOb = boxMail_Jlist.getModel().getElementAt(chooseMessage);
		try {
		    // gửi tham số cho hàm là MessageId
		    MessageProcess.moveToTrash(msgOb.id);
		    //lấy listModel từ box đang load
		    DefaultListModel listMail = (DefaultListModel) boxMail_Jlist.getModel();
		    // xoá message đang chọn ra khỏi list
		    listMail.remove(chooseMessage);
		    // set lại lên Jlist
		    boxMail_Jlist.setModel(listMail);
		    //clean readMailPanel
		    cleanReadMailPanel();
		} catch (IOException ex) {
		    Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }
	}

    }//GEN-LAST:event_moveToTrash_LbMouseClicked

    /**
     * kiểm tra các trường dữ liệu khi click cancel khi đang soạn mail và tạo
     * thư nháp
     */
    public void clickDraft() {
	String[] bcc = null;
	String[] cc = null;
	String[] to = null;
	List<String> listFile = null;

	if (!this.bcc_Tf.getText().isEmpty()) {
	    bcc = this.bcc_Tf.getText().split(";");
	}
	if (!this.cc_Tf.getText().isEmpty()) {
	    cc = this.cc_Tf.getText().split(";");
	}
	if (!this.to_Tf.getText().isEmpty()) {
	    to = this.to_Tf.getText().split(";");
	}
	String subject = this.subject_Tf.getText();
	String mainText = this.mainText_Tarea.getText();
	int numOfFile = this.fileAttachWrite_Jcb.getItemCount();
	if (numOfFile != 0) {
	    listFile = new ArrayList<>();
	    for (int i = 0; i < numOfFile; i++) {
		listFile.add(this.fileAttachWrite_Jcb.getItemAt(i));
	    }
	}
	SendMailProcess draftMail = new SendMailProcess(to, cc, bcc, subject, mainText, listFile);
	draftMail.createDraft(GlobalVariable.getService(), GlobalVariable.userId);

    }
    private void cancel_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_LbMouseClicked
	// TODO add your handling code here:
	int responseChoose = JOptionPane.showConfirmDialog(this, "Bạn có muốn lưu lại thư nháp?");
	if (responseChoose == JOptionPane.YES_OPTION) {
	    // nếu muốn tạo nháp
	    clickDraft();
	    JOptionPane.showMessageDialog(this, "Bạn đã lưu nháp thành công !");
	    cleanReadMailPanel();
	} else if (responseChoose == JOptionPane.NO_OPTION) {
	    // không tạo nháp mà xoá luôn
	    cleanReadMailPanel();
	}
    }//GEN-LAST:event_cancel_LbMouseClicked

    private void reloadBoxMail(int count) {
	//load lại số lượng mail của box đang hiện trên list
	try {
	    this.countMailLoading_Lb.setText(String.valueOf(count = LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText())));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	}
	// clean read panel 
	cleanReadMailPanel();
	DefaultListModel model = (DefaultListModel) boxMail_Jlist.getModel();
	model.removeAllElements();
	// load lại jlist dựa vào label đang load
	startThread(this.loadingBoxName_Lb.getText());
    }
    private void reload_BtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reload_BtActionPerformed
	int count = 0;
	reloadBoxMail(count);
	// đếm thôi
	if (loadingBoxName_Lb.getText().equals("INBOX")) {
	    countInboxLabel = count;
	}
	if (loadingBoxName_Lb.getText().equals("SENT")) {
	    countSentLabel = count;
	}
	if (loadingBoxName_Lb.getText().equals("TRASH")) {
	    countTrashLabel = count;
	}

    }//GEN-LAST:event_reload_BtActionPerformed

    private void trashMail_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trashMail_LbMouseClicked
	if (loadingBoxName_Lb.getText().equals("TRASH")) {
	    return;
	}
	loadHopThu("TRASH");
    }//GEN-LAST:event_trashMail_LbMouseClicked

    private void reply_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reply_LbMouseClicked
	// lấy index mail đang chọn
//	int chooseIndex = boxMail_Jlist.getSelectedIndex();
	if (chooseMessage != -1) {
	    // lấy message object tương ứng với index đã chọn
	    MessageObject msgOb = boxMail_Jlist.getModel().getElementAt(chooseMessage);
	    // hiện 1 frame cho thao tác reply
	    ReplyMailFrame a = new ReplyMailFrame(this, msgOb);
	    // set frame được nhìn thấy
	    a.setVisible(true);
	}
    }//GEN-LAST:event_reply_LbMouseClicked

    public void loadHopThu(String label) {
	//xoa panel
	cleanReadMailPanel();
	//đặt tên cho label hiện tên 
	loadingBoxName_Lb.setText(label);
	try {
	    //set số lượng cho label hiện số lượng
	    this.countMailLoading_Lb.setText(String.valueOf(LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText())));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	}

	// nếu là lần đầu bấm vào, listMode chưa được set thì khởi tạo
	DefaultListModel workingModel = null;
	if (label.equals("SENT")) {
	    workingModel = sentMailMode;
	}
	if (label.equals("INBOX")) {
	    workingModel = inboxMailMode;
	}
	if (label.equals("TRASH")) {
	    workingModel = trashMailMode;
	}
	if (workingModel == null) {
	    // khởi tạo new model
	    DefaultListModel mode = new DefaultListModel();
	    //gán model cho Jlist
	    boxMail_Jlist.setModel(mode);
	    boxMail_Jlist.setCellRenderer(new mailListRender(label));
	    startThread(label);
	    workingModel = (DefaultListModel) boxMail_Jlist.getModel();
	} else {
	    int count = 0;
	    try {
		this.countMailLoading_Lb.setText(String.valueOf(count = LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText())));
		//nếu số lượng mail hiện có lớn hơn số mail đã load được, thì reload
		if (count > boxMail_Jlist.getModel().getSize()) {
		    startThread(label);
		} else {
		    //nếu là lần thứ 2 trở đi bấm vào thì chỉ set lại model lên mà ko load lại dữ liệu
		    boxMail_Jlist.setModel(workingModel);
		    boxMail_Jlist.setCellRenderer(new mailListRender(label));
		}

	    } catch (IOException ex) {
		Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	    }
	}
	this.boxMail_Jlist.setVisible(true);
	this.writeMail_Pn.setVisible(false);
	this.readMail_Pn.setVisible(true);
    }
    private void daGui_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_daGui_LbMouseClicked
	if (loadingBoxName_Lb.getText().equals("SENT")) {
	    return;
	}
	loadHopThu("SENT");
    }//GEN-LAST:event_daGui_LbMouseClicked

    private void draft_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_draft_LbMouseClicked
	// TODO add your handling code here:
	if (loadingBoxName_Lb.getText().equals("DRAFT")) {
	    return;
	}

	// xoá read panel
	cleanReadMailPanel();
	// set tên cho label đang load
	loadingBoxName_Lb.setText("DRAFT");
	// set số lượng mail hiện lên
	try {
	    this.countMailLoading_Lb.setText(String.valueOf(LabelProcess.countAllMailLabel(this.loadingBoxName_Lb.getText())));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	}
	// khởi tạo new model
	DefaultListModel mode = new DefaultListModel();
	//gán model cho Jlist
	boxMail_Jlist.setModel(mode);
	boxMail_Jlist.setCellRenderer(new mailListRender("DRAFT"));
	// load label DRAFT và gán vào Jlist
	startThread("DRAFT");
    }//GEN-LAST:event_draft_LbMouseClicked

    private void boxMail_JlistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_boxMail_JlistValueChanged
	// TODO add your handling code here:
    }//GEN-LAST:event_boxMail_JlistValueChanged

    private void starred_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starred_CheckBoxActionPerformed
	// TODO add your handling code here:
	// gắn thêm label STARRED cho message
	MessageObject msgOb = this.boxMail_Jlist.getModel().getElementAt(chooseMessage);
	List<String> labelsToAdd = new ArrayList<>();
	List<String> labelsToRemove = new ArrayList<>();
	if (starred_CheckBox.isSelected()) { // nếu chọn
	    // thêm label
	    labelsToAdd.add("STARRED");
	    //download về
	    MessageProcess.autoDownload(msgOb);
	} else {
	    //xoá label
	    labelsToRemove.add("STARRED");
	}
	try {
	    MessageProcess.modifyLabelsToMessage(labelsToAdd, labelsToRemove, msgOb.id);
	    System.out.println("success !");
	} catch (IOException ex) {
	    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	}
    }//GEN-LAST:event_starred_CheckBoxActionPerformed

    private void moreLabel_JCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreLabel_JCbActionPerformed
	// TODO add your handling code here:
	String label = (String) this.moreLabel_JCb.getSelectedItem();
	if (!"More".equals(label)) {
	    if (loadingBoxName_Lb.getText().equals(label)) {
		return;
	    }
	    loadHopThu(label);
	}
    }//GEN-LAST:event_moreLabel_JCbActionPerformed

    private void forward_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forward_LbMouseClicked
	// TODO add your handling code here:
	if (chooseMessage != -1) {
	    // lấy message object tương ứng với index đã chọn
	    MessageObject msgOb = boxMail_Jlist.getModel().getElementAt(chooseMessage);
	    // hiện 1 frame cho thao tác reply
	    ForwardMailFrame a;
	    a = new ForwardMailFrame(this, msgOb);
	    // set frame được nhìn thấy
	    a.setVisible(true);
	}

    }//GEN-LAST:event_forward_LbMouseClicked

    private void searchIcon_LbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchIcon_LbMouseClicked
	// TODO add your handling code here:
	// dừng worker hiện tại (nếu đang chạy) 
	if (sw1 != null && (sw1.isCancelled() == false || sw1.isDone() == false)) {
	    sw1.cancel(true);
	    sw1 = null;
	}
	// set label cho Jlist hiển thị là search result
	this.loadingBoxName_Lb.setText("Search result");
	this.countMailLoading_Lb.setText("");
	// lấy về query người dùng nhập
	String searchQuery = this.search_Tf.getText();
	try {
	    List<MessageObject> searchlist = MessageProcess.search(searchQuery);
	    System.out.println(searchlist.size());
	    // khởi tạo Listmodel mới để đổ dữ liệu vào
	    // mà không dùng listmodel cũ , vì có thể vô tình xoá đi mất inboxModel hoặc trashModel
	    DefaultListModel searchMailModel = new DefaultListModel();
	    // load kết quả tìm được vào Model
	    for (int i = 0; i < searchlist.size(); i++) {
		searchMailModel.add(i, searchlist.get(i));
	    }
	    // set Model cho Jlist
	    boxMail_Jlist.setModel(searchMailModel);
	    boxMail_Jlist.setCellRenderer(new mailListRender("SEARCH"));
	    // nếu thành công thì clean đi readMailPanel
	    cleanReadMailPanel();
	} catch (IOException | MessagingException ex) {
	    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	}

    }//GEN-LAST:event_searchIcon_LbMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//	/* Set the Nimbus look and feel */
//	//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//	/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//	 */
//	try {
//	    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//		if ("Nimbus".equals(info.getName())) {
//		    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//		    break;
//		}
//	    }
//	} catch (ClassNotFoundException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	} catch (InstantiationException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	} catch (IllegalAccessException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	} catch (javax.swing.UnsupportedLookAndFeelException ex) {
//	    java.util.logging.Logger.getLogger(newMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	}
//	//</editor-fold>
//	//</editor-fold>
//
//	/* Create and display the form */
//	java.awt.EventQueue.invokeLater(new Runnable() {
//	    public void run() {
//		new newMainPage().setVisible(true);
//	    }
//	});
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFileWrite_Bt;
    private javax.swing.JLabel bcc_Lb;
    private javax.swing.JTextField bcc_Tf;
    public javax.swing.JList<MessageObject> boxMail_Jlist;
    private javax.swing.JLabel boxMail_Lb;
    private javax.swing.JLabel cancel_Lb;
    private javax.swing.JLabel cc_Lb;
    private javax.swing.JTextField cc_Tf;
    private javax.swing.JLabel countMailLoading_Lb;
    private javax.swing.JLabel daGui_Lb;
    private javax.swing.JLabel date_Lb;
    private javax.swing.JTextField date_Tf;
    private javax.swing.JLabel downMail_Lb;
    private javax.swing.JLabel draft_Lb;
    private javax.swing.JPanel dynamic_option_read_writeMenu_Pn;
    private javax.swing.JLabel exit_Lb;
    private javax.swing.JComboBox<String> fileAttachRead_Jcb;
    private javax.swing.JLabel fileAttachRead_Lb;
    public javax.swing.JComboBox<String> fileAttachWrite_Jcb;
    private javax.swing.JLabel fileAttachWrite_Lb;
    private javax.swing.JLabel forward_Lb;
    private javax.swing.JLabel from_Lb;
    private javax.swing.JTextField from_Tf;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JLabel loadingBoxName_Lb;
    public static javax.swing.JLabel loginingUser_Lb;
    private javax.swing.JLabel logout_Lb;
    private javax.swing.JPanel mailBox_Pn;
    private javax.swing.JPanel mail_Pn;
    private javax.swing.JTextArea mainText_Tarea;
    private javax.swing.JLabel menu_Lb;
    private javax.swing.JPanel menu_Pn;
    private javax.swing.JComboBox<String> moreLabel_JCb;
    private javax.swing.JLabel moveToTrash_Lb;
    private javax.swing.JLabel newMail_Lb;
    private javax.swing.JPanel readMail_Pn;
    private javax.swing.JButton reload_Bt;
    private javax.swing.JLabel reply_Lb;
    private javax.swing.JLabel searchIcon_Lb;
    private javax.swing.JTextField search_Tf;
    private javax.swing.JLabel send_Lb;
    private javax.swing.JCheckBox starred_CheckBox;
    private javax.swing.JLabel subject_Lb;
    private javax.swing.JTextField subject_Tf;
    private javax.swing.JLabel to_Lb;
    private javax.swing.JTextField to_Tf;
    private javax.swing.JPanel topMenu_Pn;
    private javax.swing.JLabel trashMail_Lb;
    private javax.swing.JPanel writeMail_Pn;
    // End of variables declaration//GEN-END:variables

    /**
     * load tất cả messages nằm trong loadLabel chuyển thành messageObject và
     * đưa lên Jlist để hiển thị
     *
     * @param label
     */
    public void loadMsgObToJlist(String loadLabel) {
	// load label nào thì set text label đấy
	loadingBoxName_Lb.setText(loadLabel);
	// get model hiện tại của Jlist
	DefaultListModel listMailModel = new DefaultListModel(); // khởi tạo Listmodel để đổ dữ liệu vào
//	listMailModel.removeAllElements();
	try {
	    // khởi tạo List<MessageObject> bằng hàm initInboxList()
	    List<MessageObject> messageInbox = Init.initInboxList(loadLabel);
	    // set model cho 

	    // đưa từng object lên model
	    for (int i = 0; i < messageInbox.size(); i++) {
		listMailModel.addElement(messageInbox.get(i));
	    }
//	    boxMail_Jlist.setCellRenderer(new mailListRender("SENT"));   // set các cell trong list lại .
	    boxMail_Jlist.setModel(listMailModel);                      // đổ dữ liệu từ listmodel đã tạo ở trên vào cái hiển thị
	    sentMailMode = listMailModel;
	} catch (FailToLoadInitInboxException ex) {
	    Logger.getLogger(index.class.getName()).log(Level.SEVERE, null, ex);
	}
    }

    class worker extends SwingWorker<String, MessageObject> {

	List<String> loadFromLabel;

	public worker(String loadFromLabel) {
	    this.loadFromLabel = new ArrayList<>();
	    this.loadFromLabel.add(loadFromLabel);
	}

	@Override
	protected String doInBackground() throws Exception {
	    ListMessagesResponse response = null;
	    Gmail service = GlobalVariable.getService();
	    try {
		response = service.users().messages().list(GlobalVariable.userId).setLabelIds(loadFromLabel).execute();
		List<Message> messages = new ArrayList<>();
		try {
		    while (response.getMessages() != null && isCancelled() != true) {
			messages.addAll(response.getMessages());
			for (Message msg : messages) {
			    // lấy headers của từng mail thông qua ID của mail
			    MessageObject newMessOb = MessageProcess.getQuickHeaderInfo(msg.getId());
//			    System.out.println(newMessOb.id + " " + newMessOb.from + " " + newMessOb.date);
			    publish(newMessOb);
			    Thread.sleep(100);
			}

			if (response.getNextPageToken() != null) {
			    String pageToken = response.getNextPageToken();
			    response = service.users().messages().list(GlobalVariable.userId).setLabelIds(loadFromLabel).setPageToken(pageToken).execute();
			} else {
			    break;
			}
		    }
		} catch (IOException ex) {
		}
	    } catch (IOException ex) {
		Logger.getLogger(loadDataThread.class.getName()).log(Level.SEVERE, null, ex);
	    }

	    String res = "Finish loading";
	    return res;
	}

	@Override
	// xử lý object được publish
	protected void process(List<MessageObject> chunks) {
	    if (isCancelled()) {
		return;
	    }
	    MessageObject val = chunks.get(chunks.size() - 1);
	    // kiểm tra quan trọng và download
	    MessageProcess.autoDownload(val);
	    DefaultListModel model = (DefaultListModel) boxMail_Jlist.getModel();
	    model.addElement(val);
	    boxMail_Jlist.setCellRenderer(new mailListRender(loadFromLabel.get(0)));
	    boxMail_Jlist.setModel(model);
	}

	@Override
	// phương thức gọi sau khi thực thi xong
	protected void done() {
	    // this method is called when the background
	    // thread finishes execution
	    System.out.println("Inside done function");
	}

    };

    /**
     * Gọi 1 thread load items lên JList
     *
     * @param label
     */
    public void startThread(String label) {
	if (sw1 != null && (sw1.isCancelled() == false || sw1.isDone() == false)) {
	    sw1.cancel(true);
	    sw1 = null;
	}

	sw1 = new worker(label);
	sw1.execute();
    }

    private void loadStartUpMailBox() {
	try {
	    this.countMailLoading_Lb.setText(String.valueOf(countInboxLabel = LabelProcess.countAllMailLabel("INBOX")));
	} catch (IOException ex) {
	    Logger.getLogger(newMainPage.class.getName()).log(Level.SEVERE, null, ex);
	}
	if (GlobalVariable.internetOn == true) {
	    DefaultListModel listMailMode = new DefaultListModel();
	    boxMail_Jlist.setModel(listMailMode);
	    startThread("INBOX");
	    inboxMailMode = (DefaultListModel) boxMail_Jlist.getModel(); // lưu lại inbox model
	} else {
	    // nếu không có internet( có thể không xử lý trường hợp này vì chắc gì cô đã care)
	}
    }

    private void cleanReadMailPanel() {
	from_Tf.setText("");
	bcc_Tf.setText("");
	cc_Tf.setText("");
	subject_Tf.setText("");
	to_Tf.setText("");
	mainText_Tarea.setText("");
	this.fileAttachRead_Jcb.removeAllItems();
	date_Tf.setText("");
    }
}
